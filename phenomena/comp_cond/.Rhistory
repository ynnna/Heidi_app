source('load_packages.R', local= TRUE)
source('my_theme.R', local= TRUE)
source('model.R', local= TRUE)
alpha_value_A= 0.3
alpha_value_B= 0.5
alpha_value_C= 0.5
beta_value<- 0.7
set.seed(20)
#Inputs
selected_trial = 20
n_trial<-as.numeric(selected_trial)
half_trial<- n_trial/2
trial<- c(1:n_trial)
#Model used for one CS and one US (Conditioning, Extinction)
# True discrinination data frame
alpha_A<- rep(alpha_value_A, n_trial)
set.seed(19)
vector_B<- c(rep(alpha_value_B, half_trial), rep(0, half_trial))
alpha_B<- sample(vector_B,length(vector_B),replace=FALSE)
df_true<- data.frame(trial, alpha_A, alpha_B)
df_true <- df_true%>% mutate (alpha_C = ifelse (alpha_B ==0, alpha_value_C, 0),
beta = ifelse (alpha_C ==0, beta_value, 0),
trial_type = ifelse (beta==0, 'AC-', 'AB+'))
df_true$discrimination<- 'true_discrimination'
# Pseudo discrinination data frame
alpha_A<- rep(alpha_value_A, n_trial)
alpha_B<- rep(c(alpha_value_B, 0, alpha_value_B, 0), n_trial/4)
alpha_C<- rep(c(0, alpha_value_C, 0, alpha_value_C), n_trial/4)
beta<- rep(c(0, 0, beta_value, beta_value), n_trial/4)
df_pseudo_sample<- data.frame(cbind(alpha_A, alpha_B, alpha_C, beta))
set.seed(19)
df_pseudo <- df_pseudo_sample[sample(nrow(df_pseudo_sample)), ]
df_pseudo<- cbind.data.frame(trial, df_pseudo)
df_pseudo <- df_pseudo%>% mutate (trial_type = ifelse (alpha_C == 0 & beta > 0, 'AB+',
ifelse (alpha_C == 0 & beta == 0, 'AB-',
ifelse (alpha_B == 0 & beta > 0, 'AC+',
ifelse (alpha_B == 0 & beta == 0, 'AC-', 'error')))))
df_pseudo$discrimination<- 'pseudo_discrimination'
#Modelled
df_true<- model(df_true)
df_pseudo<- model(df_pseudo)
#Long format
df_true_long<- to.long(df_true)
df_pseudo_long<- to.long(df_pseudo)
#Labelled
df_true_long<- label.df(df_true_long)
df_pseudo_long<- label.df(df_pseudo_long)
df_long<- rbind.data.frame(df_true_long, df_pseudo_long)
df<- rbind.data.frame(df_true, df_pseudo)
#Spacing on x axis
if (n_trial <= 20) {
seq(0, n_trial, 5)
x_spacing <- seq(0, n_trial, 1)
} else if (n_trial > 20){
x_spacing<- seq(0, n_trial, 5)}
decide_max_limit<- function (y_vector) {
max_y<- max(y_vector)
max_y<- round((1.5* max_y),1)
return(max_y)
}
decide_min_limit<- function (y_vector) {
min_y<- min(y_vector)
min_y<- round((1.5* min_y),1)
return(min_y)
}
max_limit<- decide_max_limit(df_long$value_ass)
min_limit<- decide_min_limit(df_long$value_ass)
# True discrimnination
### CS-US
df_true_cs_us<- (df_true_long[df_true_long$ass_indicator %in%
c('A-US',  'B-US', 'C-US'), ])
#Associations with US1 (ex a and d)
a<- ggplot(df_true_cs_us, aes(x= factor(trial), y= value_ass, group=factor(ass_indicator)))+
geom_line(size= 1, linetype = 'solid') +
geom_point(size= 3,  aes(shape= factor(ass_indicator),  fill= trial_type,  color = trial_type )) +
scale_shape_manual(values= c(21, 22, 24)) +
scale_fill_manual(values=  c("#990a00", "#b7a6ff")) +
scale_color_manual(values=  c("#990a00", "#b7a6ff")) +
scale_y_continuous (name= expression('Associative strength (V)'),
limits = c(min_limit, max_limit),  breaks= seq(min_limit, max_limit, 0.2)) +
scale_x_discrete(name= expression("Trials"), breaks= x_spacing)+
ggtitle('CS-US associations')
source('load_packages.R', local= TRUE)
source('my_theme.R', local= TRUE)
source('model.R', local= TRUE)
alpha_value_A= 0.3
alpha_value_B= 0.5
alpha_value_C= 0.5
beta_value<- 0.7
set.seed(20)
#Inputs
selected_trial = 20
n_trial<-as.numeric(selected_trial)
half_trial<- n_trial/2
trial<- c(1:n_trial)
#Model used for one CS and one US (Conditioning, Extinction)
# True discrinination data frame
alpha_A<- rep(alpha_value_A, n_trial)
set.seed(19)
vector_B<- c(rep(alpha_value_B, half_trial), rep(0, half_trial))
alpha_B<- sample(vector_B,length(vector_B),replace=FALSE)
df_true<- data.frame(trial, alpha_A, alpha_B)
df_true <- df_true%>% mutate (alpha_C = ifelse (alpha_B ==0, alpha_value_C, 0),
beta = ifelse (alpha_C ==0, beta_value, 0),
trial_type = ifelse (beta==0, 'AC-', 'AB+'))
df_true$discrimination<- 'true_discrimination'
# Pseudo discrinination data frame
alpha_A<- rep(alpha_value_A, n_trial)
alpha_B<- rep(c(alpha_value_B, 0, alpha_value_B, 0), n_trial/4)
alpha_C<- rep(c(0, alpha_value_C, 0, alpha_value_C), n_trial/4)
beta<- rep(c(0, 0, beta_value, beta_value), n_trial/4)
df_pseudo_sample<- data.frame(cbind(alpha_A, alpha_B, alpha_C, beta))
set.seed(19)
df_pseudo <- df_pseudo_sample[sample(nrow(df_pseudo_sample)), ]
df_pseudo<- cbind.data.frame(trial, df_pseudo)
df_pseudo <- df_pseudo%>% mutate (trial_type = ifelse (alpha_C == 0 & beta > 0, 'AB+',
ifelse (alpha_C == 0 & beta == 0, 'AB-',
ifelse (alpha_B == 0 & beta > 0, 'AC+',
ifelse (alpha_B == 0 & beta == 0, 'AC-', 'error')))))
df_pseudo$discrimination<- 'pseudo_discrimination'
#Modelled
df_true<- model(df_true)
df_pseudo<- model(df_pseudo)
#Long format
df_true_long<- to.long(df_true)
df_pseudo_long<- to.long(df_pseudo)
#Labelled
df_true_long<- label.df(df_true_long)
df_pseudo_long<- label.df(df_pseudo_long)
df_long<- rbind.data.frame(df_true_long, df_pseudo_long)
df<- rbind.data.frame(df_true, df_pseudo)
#Spacing on x axis
if (n_trial <= 20) {
seq(0, n_trial, 5)
x_spacing <- seq(0, n_trial, 1)
} else if (n_trial > 20){
x_spacing<- seq(0, n_trial, 5)}
decide_max_limit<- function (y_vector) {
max_y<- max(y_vector)
max_y<- round((1.5* max_y),1)
return(max_y)
}
decide_min_limit<- function (y_vector) {
min_y<- min(y_vector)
min_y<- round((1.5* min_y),1)
return(min_y)
}
max_limit<- decide_max_limit(df_long$value_ass)
min_limit<- decide_min_limit(df_long$value_ass)
# True discrimnination
### CS-US
df_true_cs_us<- (df_true_long[df_true_long$ass_indicator %in%
c('A-US',  'B-US', 'C-US'), ])
#Associations with US1 (ex a and d)
a<- ggplot(df_true_cs_us, aes(x= factor(trial), y= value_ass, group=factor(ass_indicator)))+
geom_line(size= 1, linetype = 'solid') +
geom_point(size= 3,  aes(shape= factor(ass_indicator),  fill= trial_type,  color = trial_type )) +
scale_shape_manual(values= c(21, 22, 24)) +
scale_fill_manual(values=  c("#990a00", "#b7a6ff")) +
scale_color_manual(values=  c("#990a00", "#b7a6ff")) +
scale_y_continuous (name= expression('Associative strength (V)'),
limits = c(min_limit, max_limit),  breaks= seq(min_limit, max_limit, 0.2)) +
scale_x_discrete(name= expression("Trials"), breaks= x_spacing)+
ggtitle('CS-US associations')
